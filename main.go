package main

import (
	"fmt"
	"math/rand"
	"strings"
	"time"

	"github.com/atotto/clipboard"

	cypher "github.com/hculpan/cyphers/cyphers"
	cypher_layout "github.com/hculpan/cyphers/layout"
	"github.com/hculpan/cyphers/types"

	"fyne.io/fyne"
	"fyne.io/fyne/app"
	"fyne.io/fyne/container"
	"fyne.io/fyne/layout"
	"fyne.io/fyne/widget"
)

//go:generate go run scripts/includecyphers.go

var rnd = rand.New(rand.NewSource(time.Now().UnixNano()))

var unique bool = false
var fullOutput bool = false
var onClipboard bool = true
var useSubtleCyphers bool = false
var useNumeneraCyphers bool = true
var outputRolls bool = false

var selectedList int
var cypherCount int = 1

var outputEntry *widget.Label

var resourceClipPng = &fyne.StaticResource{
	StaticName: "clip.png",
	StaticContent: []byte{
		137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 38, 0, 0, 0, 44, 8, 6, 0, 0, 0, 9, 166, 202, 200, 0, 0, 1, 132, 105, 67, 67, 80, 73, 67, 67, 32, 112, 114, 111, 102, 105, 108, 101, 0, 0, 40, 145, 125, 145, 61, 72, 195, 64, 28, 197, 95, 211, 74, 69, 42, 34, 86, 16, 113, 200, 80, 157, 44, 136, 138, 56, 74, 21, 139, 96, 161, 180, 21, 90, 117, 48, 185, 244, 11, 154, 52, 36, 41, 46, 142, 130, 107, 193, 193, 143, 197, 170, 131, 139, 179, 174, 14, 174, 130, 32, 248, 1, 226, 228, 232, 164, 232, 34, 37, 254, 47, 41, 180, 136, 241, 224, 184, 31, 239, 238, 61, 238, 222, 1, 66, 163, 194, 84, 51, 48, 1, 168, 154, 101, 164, 226, 49, 49, 155, 91, 21, 131, 175, 8, 193, 143, 0, 250, 49, 40, 49, 83, 79, 164, 23, 51, 240, 28, 95, 247, 240, 241, 245, 46, 202, 179, 188, 207, 253, 57, 122, 149, 188, 201, 0, 159, 72, 60, 199, 116, 195, 34, 222, 32, 158, 217, 180, 116, 206, 251, 196, 97, 86, 146, 20, 226, 115, 226, 113, 131, 46, 72, 252, 200, 117, 217, 229, 55, 206, 69, 135, 5, 158, 25, 54, 50, 169, 121, 226, 48, 177, 88, 236, 96, 185, 131, 89, 201, 80, 137, 167, 137, 35, 138, 170, 81, 190, 144, 117, 89, 225, 188, 197, 89, 173, 212, 88, 235, 158, 252, 133, 161, 188, 182, 146, 230, 58, 205, 17, 196, 177, 132, 4, 146, 16, 33, 163, 134, 50, 42, 176, 16, 165, 85, 35, 197, 68, 138, 246, 99, 30, 254, 97, 199, 159, 36, 151, 76, 174, 50, 24, 57, 22, 80, 133, 10, 201, 241, 131, 255, 193, 239, 110, 205, 194, 212, 164, 155, 20, 138, 1, 93, 47, 182, 253, 49, 10, 4, 119, 129, 102, 221, 182, 191, 143, 109, 187, 121, 2, 248, 159, 129, 43, 173, 237, 175, 54, 128, 217, 79, 210, 235, 109, 45, 114, 4, 244, 109, 3, 23, 215, 109, 77, 222, 3, 46, 119, 128, 161, 39, 93, 50, 36, 71, 242, 211, 20, 10, 5, 224, 253, 140, 190, 41, 7, 12, 220, 2, 61, 107, 110, 111, 173, 125, 156, 62, 0, 25, 234, 106, 249, 6, 56, 56, 4, 198, 138, 148, 189, 238, 241, 238, 238, 206, 222, 254, 61, 211, 234, 239, 7, 24, 169, 114, 131, 43, 179, 111, 191, 0, 0, 0, 6, 98, 75, 71, 68, 0, 28, 0, 124, 0, 174, 48, 214, 222, 39, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 46, 35, 0, 0, 46, 35, 1, 120, 165, 63, 118, 0, 0, 0, 7, 116, 73, 77, 69, 7, 228, 12, 3, 4, 23, 48, 178, 23, 173, 61, 0, 0, 0, 25, 116, 69, 88, 116, 67, 111, 109, 109, 101, 110, 116, 0, 67, 114, 101, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 71, 73, 77, 80, 87, 129, 14, 23, 0, 0, 4, 53, 73, 68, 65, 84, 88, 195, 229, 152, 93, 72, 91, 103, 24, 199, 127, 249, 160, 241, 35, 185, 18, 141, 122, 211, 133, 218, 16, 237, 4, 17, 68, 82, 193, 154, 26, 117, 234, 141, 17, 197, 15, 172, 210, 118, 82, 164, 202, 46, 138, 117, 179, 12, 186, 73, 101, 184, 10, 163, 153, 21, 169, 23, 67, 116, 81, 42, 114, 166, 86, 83, 123, 35, 217, 84, 24, 41, 10, 195, 37, 5, 103, 5, 89, 181, 88, 21, 180, 49, 81, 153, 217, 69, 53, 116, 172, 126, 199, 196, 177, 231, 234, 188, 225, 156, 247, 252, 242, 156, 231, 227, 255, 188, 162, 184, 184, 56, 55, 167, 208, 196, 156, 82, 147, 30, 119, 3, 65, 16, 152, 158, 158, 102, 99, 99, 131, 200, 200, 72, 74, 75, 75, 253, 239, 49, 65, 16, 24, 26, 26, 66, 119, 233, 18, 25, 105, 105, 196, 94, 184, 64, 83, 83, 147, 87, 192, 68, 71, 141, 177, 145, 218, 90, 44, 10, 5, 159, 164, 167, 211, 35, 8, 40, 149, 74, 146, 180, 90, 0, 230, 94, 191, 38, 43, 43, 203, 119, 96, 38, 147, 137, 217, 217, 89, 92, 46, 23, 155, 155, 155, 228, 230, 228, 0, 240, 171, 213, 74, 72, 72, 8, 231, 84, 170, 119, 247, 117, 117, 17, 20, 20, 132, 68, 34, 33, 52, 52, 20, 149, 74, 69, 70, 70, 134, 119, 192, 44, 70, 35, 127, 200, 229, 44, 46, 46, 226, 118, 187, 113, 58, 157, 76, 78, 78, 242, 249, 237, 219, 31, 220, 104, 109, 109, 141, 160, 160, 160, 127, 253, 190, 186, 186, 74, 255, 192, 0, 97, 97, 97, 0, 4, 6, 6, 18, 25, 25, 137, 193, 96, 56, 60, 216, 88, 110, 46, 191, 104, 181, 232, 47, 95, 62, 145, 140, 107, 121, 244, 8, 189, 94, 79, 94, 94, 222, 225, 178, 242, 207, 226, 98, 68, 47, 95, 122, 54, 9, 9, 9, 97, 115, 115, 147, 162, 130, 130, 35, 129, 252, 208, 214, 134, 66, 161, 96, 125, 125, 157, 226, 194, 66, 110, 148, 151, 243, 244, 217, 179, 195, 151, 11, 167, 211, 73, 234, 182, 183, 82, 83, 83, 201, 207, 207, 7, 32, 62, 62, 158, 153, 153, 25, 28, 14, 199, 193, 82, 94, 44, 38, 60, 60, 156, 156, 132, 4, 116, 37, 37, 140, 212, 214, 242, 100, 112, 144, 236, 204, 76, 86, 86, 86, 24, 169, 173, 37, 169, 190, 254, 104, 117, 44, 56, 56, 216, 115, 93, 88, 88, 120, 172, 79, 152, 84, 95, 79, 99, 99, 35, 0, 110, 183, 27, 241, 139, 23, 135, 171, 99, 110, 247, 201, 117, 169, 157, 189, 69, 34, 209, 127, 179, 37, 249, 21, 108, 75, 163, 241, 92, 155, 205, 102, 76, 38, 211, 233, 242, 88, 103, 103, 39, 3, 3, 3, 8, 130, 64, 71, 71, 135, 255, 193, 254, 138, 136, 64, 16, 4, 44, 22, 11, 87, 203, 202, 112, 185, 92, 72, 165, 82, 239, 168, 139, 227, 36, 193, 92, 88, 24, 191, 89, 173, 148, 95, 191, 14, 128, 78, 167, 163, 96, 187, 86, 250, 205, 99, 34, 145, 8, 155, 205, 134, 227, 237, 91, 0, 186, 123, 122, 136, 61, 123, 214, 191, 49, 102, 108, 106, 66, 34, 145, 96, 183, 219, 41, 189, 114, 133, 239, 30, 60, 32, 33, 33, 129, 212, 247, 250, 167, 207, 193, 228, 114, 57, 42, 149, 138, 133, 133, 5, 106, 170, 171, 105, 184, 127, 159, 228, 228, 100, 114, 182, 149, 138, 223, 192, 148, 74, 37, 46, 151, 139, 27, 229, 229, 0, 196, 198, 198, 18, 243, 228, 137, 255, 235, 216, 242, 242, 50, 54, 155, 13, 128, 166, 230, 102, 162, 163, 163, 209, 246, 244, 248, 22, 204, 98, 52, 98, 54, 155, 61, 235, 222, 222, 94, 38, 38, 38, 248, 242, 206, 29, 143, 40, 216, 77, 151, 157, 88, 185, 104, 111, 111, 167, 107, 108, 12, 199, 243, 231, 152, 76, 38, 62, 122, 252, 152, 159, 237, 118, 212, 231, 207, 3, 240, 99, 103, 39, 233, 58, 157, 111, 91, 146, 217, 108, 102, 120, 120, 152, 79, 175, 93, 227, 179, 170, 42, 108, 54, 27, 191, 103, 103, 99, 181, 90, 73, 186, 120, 145, 186, 123, 247, 136, 137, 137, 33, 109, 143, 185, 224, 68, 60, 38, 123, 243, 6, 185, 92, 238, 89, 143, 143, 143, 51, 53, 53, 197, 23, 53, 53, 0, 104, 52, 26, 196, 98, 177, 239, 155, 184, 174, 164, 4, 181, 90, 237, 89, 127, 125, 247, 46, 213, 183, 110, 1, 240, 253, 195, 135, 200, 100, 50, 22, 22, 22, 176, 24, 141, 190, 87, 23, 17, 17, 17, 124, 187, 45, 10, 119, 172, 175, 191, 159, 240, 240, 112, 22, 23, 23, 89, 90, 90, 66, 50, 55, 231, 123, 48, 131, 193, 64, 116, 116, 244, 63, 103, 137, 87, 175, 16, 139, 197, 92, 45, 43, 219, 87, 140, 158, 104, 185, 136, 138, 138, 226, 155, 134, 6, 0, 190, 170, 171, 67, 163, 209, 32, 147, 201, 60, 189, 82, 108, 183, 251, 7, 172, 168, 168, 136, 148, 148, 20, 58, 76, 38, 244, 122, 61, 106, 181, 218, 3, 230, 119, 5, 91, 81, 81, 129, 225, 204, 25, 42, 43, 43, 201, 206, 206, 62, 240, 60, 225, 147, 150, 244, 254, 136, 182, 223, 16, 226, 183, 94, 121, 106, 193, 78, 237, 148, 228, 181, 24, 59, 201, 225, 247, 88, 96, 7, 141, 137, 195, 198, 216, 126, 127, 88, 186, 219, 97, 200, 142, 77, 79, 79, 211, 221, 221, 237, 21, 40, 167, 211, 201, 248, 248, 248, 187, 23, 75, 165, 31, 20, 136, 123, 130, 41, 20, 10, 154, 91, 90, 40, 41, 46, 38, 73, 171, 101, 126, 126, 222, 43, 96, 231, 84, 42, 62, 142, 137, 1, 32, 52, 52, 116, 111, 207, 238, 118, 162, 216, 218, 218, 202, 232, 232, 40, 85, 55, 111, 122, 61, 126, 126, 234, 235, 35, 49, 49, 145, 204, 204, 204, 195, 131, 1, 12, 14, 14, 226, 112, 56, 216, 218, 218, 58, 118, 18, 236, 60, 31, 16, 16, 128, 178, 173, 109, 207, 207, 184, 47, 216, 255, 246, 180, 103, 47, 251, 27, 190, 170, 120, 223, 105, 107, 172, 161, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}}

func main() {
	a := app.New()
	w := a.NewWindow("Cyphers")

	radio := widget.NewRadioGroup([]string{"Numenera", "Subtle"}, func(c string) {
		switch c {
		case "Numenera":
			selectedList = cypher.NUMENERA_CYPHERS
		case "Subtle":
			selectedList = cypher.SUBTLE_CYPHERS
		}
	})
	radio.SetSelected("Numenera")
	//	radio.Horizontal = true

	countLabel := widget.NewLabel("How many cyphers: 1")
	countSlider := widget.NewSlider(1.0, 10.0)
	countSlider.OnChanged = func(v float64) {
		countLabel.Text = fmt.Sprintf("How many cyphers: %d", int(v))
		cypherCount = int(v)
	}

	outputEntry = widget.NewLabel("")
	outputEntry.Wrapping = fyne.TextWrapWord

	clipButton := widget.NewButton("", func() {
		if outputEntry.Text != "" {
			clipboard.WriteAll(outputEntry.Text)
		}
	})
	//	img := canvas.NewImageFromResource(resourceClipPng)
	clipButton.SetIcon(resourceClipPng)

	vbox := widget.NewVBox(
		widget.NewHBox(layout.NewSpacer(), radio, layout.NewSpacer()),
		widget.NewHBox(layout.NewSpacer(), countLabel, layout.NewSpacer()),
		fyne.NewContainerWithLayout(layout.NewMaxLayout(), countSlider),
		widget.NewHBox(layout.NewSpacer(), widget.NewButton("Generate", func() {
			generateCyphers()
		}), layout.NewSpacer(), clipButton),
		fyne.NewContainerWithLayout(cypher_layout.NewLabelLayout(), container.NewScroll(outputEntry)),
	)
	w.SetContent(vbox)

	w.Resize(fyne.NewSize(400, 600))
	w.CenterOnScreen()
	w.SetFixedSize(true)

	w.ShowAndRun()
}

func generateCyphers() {
	clipText := ""
	for i := 0; i < cypherCount; i++ {
		if v, err := cypher.GetCyphers(selectedList, outputRolls); err == nil {
			if fullOutput {
				clipText += buildCypherOutputForConsole(v, v.ActualLevel, v.Effect)
			} else {
				clipText += buildCypherOutputForClipboard(v, v.ActualLevel, v.Effect)
			}
		} else {
			fmt.Printf("Error: %s\n", err.Error())
			break
		}
	}

	outputEntry.SetText(clipText)
}

func buildCypherOutputForClipboard(c *types.Cypher, lvl int, effect string) string {
	return buildCypherOutput(c, lvl, strings.ReplaceAll(effect, "\n", " "), true)
}

func buildCypherOutputForConsole(c *types.Cypher, lvl int, effect string) string {
	return buildCypherOutput(c, lvl, effect, false)
}

func buildCypherOutput(c *types.Cypher, lvl int, effect string, roll20Formatting bool) string {
	var result string
	if roll20Formatting {
		result = fmt.Sprintf("**%s : Level %d**\n", c.Name, lvl)
	} else {
		result = fmt.Sprintf("%s : Level %d\n", c.Name, lvl)
	}

	if len(c.Type) > 0 {
		result += fmt.Sprintf("%s\n", c.Type[rand.Int()%len(c.Type)])
	}

	result += effect + "\n"

	return result
}
